{"version":3,"sources":["Components/Card/Cards.module.css","Components/Card/Cards.js","Components/Graph/Graph.js","Components/Countries/Countries.js","CovidTracker.js","App.js","serviceWorker.js","index.js","Components/Graph/Graph.module.css","Components/Countries/Countries.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","date","Date","toDateString","time","toLocaleTimeString","className","style","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","variant","Typography","color","gutterBottom","start","end","value","duration","separator","position","margin","textAlign","Graph","country","useState","dailyData","setDailyData","useEffect","axios","get","then","res","modified","map","daily","total","reportDate","catch","err","console","log","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","LineChart","length","borderColor","fill","raised","cardGraph","Countries","handleCountryChange","setCountry","countries","name","styles","FormControl","NativeSelect","disableUnderline","native_select","onChange","e","target","names","i","key","CovidTracker","setData","newURL","fontFamily","marginTop","textShadow","Backdrop","open","CircularProgress","zIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c83c7275.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1XQK4\",\"card\":\"Cards_card__2tOJy\",\"infected\":\"Cards_infected__1y8VL\",\"recovered\":\"Cards_recovered__2kvmI\",\"deaths\":\"Cards_deaths__2E_fj\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid,Backdrop} from '@material-ui/core'\r\nimport style from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    const date=new Date(lastUpdate).toDateString();\r\n    const time=new Date(lastUpdate).toLocaleTimeString();\r\n    if(!confirmed){\r\n        return(\r\n            ''\r\n        );\r\n    }\r\n    return ( \r\n        <div className={style.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={10} md={3} className={cx(style.card,style.infected)}>\r\n                    <CardContent variant=\"outlined\">\r\n                        <Typography color=\"textSecondary\" gutterBottom>Total</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                            start={0} \r\n                            end={confirmed.value}\r\n                            duration={1.0}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{date}</Typography>\r\n                        <Typography variant=\"body2\">Number of total cases</Typography> \r\n                    </CardContent>     \r\n                </Grid>\r\n                <Grid item component={Card} xs={10} md={3} className={cx(style.card,style.recovered)}>\r\n                    <CardContent variant=\"outlined\">\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recoverd</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                                start={0} \r\n                                end={recovered.value}\r\n                                duration={1.0}\r\n                                separator=\",\"\r\n                                />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{date}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoverd cases</Typography> \r\n                    </CardContent>     \r\n                </Grid> \r\n                <Grid item component={Card} xs={10} md={3} className={cx(style.card,style.deaths)}>\r\n                    <CardContent variant=\"outlined\">\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp\r\n                                start={0} \r\n                                end={deaths.value}\r\n                                duration={1.0}\r\n                                separator=\",\"\r\n                                />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{date}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths cases</Typography> \r\n                    </CardContent>     \r\n                </Grid>  \r\n            </Grid>\r\n            <Typography style={{position:\"relative\",margin:\"20px\",textAlign:\"center\"}} variant=\"h6\" color=\"textPrimary\">Last Updated: {time}</Typography>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Cards;","import React,{useState,useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Card} from '@material-ui/core';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport style from './Graph.module.css';\r\nconst url=\"https://covid19.mathdro.id/api\";\r\nconst Graph = ({data:{confirmed,recovered,deaths},country}) => {\r\n    const [dailyData,setDailyData]=useState([]);\r\n    useEffect(()=>{\r\n        axios.get(`${url}/daily`)\r\n        .then(res=>{\r\n            const{data}=res;\r\n            //console.log(typeof data);\r\n            const modified=data.map((daily)=>({\r\n                confirmed:daily.confirmed.total,\r\n                deaths:daily.deaths.total,\r\n                date:daily.reportDate\r\n            }))\r\n            setDailyData(modified);\r\n        })\r\n        .catch(err=>console.log(err));\r\n    },[])\r\n    const barChart=(\r\n        confirmed?\r\n        (\r\n         <Bar\r\n            data={{\r\n                labels:['Iotal','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:[\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(0,0,255,0.5)',\r\n                        'rgba(255,0,0,0.5)'\r\n                    ],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current stats in ${country}`},\r\n            }}\r\n         />   \r\n        ):null\r\n    )\r\n    const LineChart=( //line chart function which will just return the basic html code . Did'nt use the \"return()\" . \r\n        dailyData.length?\r\n         ( \r\n           <Line\r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data:dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Confirmed',\r\n                    borderColor:'#333fff',\r\n                    fill:true\r\n                },{\r\n                    data:dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.1)',\r\n                    fill:true\r\n                }]\r\n            }}\r\n            />\r\n            ):''\r\n    );\r\n    return (  \r\n        <Card raised={true} className={style.cardGraph}>\r\n            <div className={style.container}>\r\n                {country?barChart:LineChart}\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n \r\nexport default Graph;","import React,{useState,useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './Countries.module.css'\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nconst Countries = ({handleCountryChange}) => {\r\n    const[country,setCountry]=useState([]);\r\n    useEffect(()=>{\r\n        axios.get(`${url}/countries`)\r\n        .then(res=>{\r\n            const{data:{countries}} = res;\r\n            const modified=countries.map((country)=>country.name)\r\n            setCountry(modified);         \r\n        })\r\n    },[setCountry])\r\n    return (  \r\n        <div className={styles.container}>\r\n            <FormControl>\r\n                <NativeSelect disableUnderline  className={styles.native_select} onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {country.map((names,i)=>(\r\n                        <option key ={i} value={names}>{names}</option>\r\n                    ))}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Countries;","import React,{useEffect,useState} from 'react';\r\nimport Cards from './Components/Card/Cards';\r\nimport Graph from './Components/Graph/Graph';\r\nimport Countries from './Components/Countries/Countries';\r\nimport {Typography,Backdrop} from '@material-ui/core';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from 'axios';\r\nconst url=\"https://covid19.mathdro.id/api\";\r\nconst CovidTracker = () => {\r\n    const[data,setData]=useState({});\r\n    const[country,setCountry]=useState('');\r\n    useEffect(()=>{\r\n        let newURL=`${url}`;\r\n        if(country){\r\n            newURL=`${url}/countries/${country}`;\r\n        }\r\n        axios.get(`${newURL}`)\r\n        .then(res=>{\r\n            setData({\r\n                confirmed:res.data.confirmed,\r\n                recovered:res.data.recovered,\r\n                deaths:res.data.deaths,\r\n                lastUpdate:res.data.lastUpdate\r\n            })\r\n        });\r\n    },[country])\r\n    const handleOnChange=(country)=>{\r\n        setCountry(country);\r\n       // console.log(data);\r\n    }\r\n    const styles={\r\n        fontFamily: \"Fredericka the Great, cursive\",\r\n        marginTop:\"5%\",\r\n        textShadow: \"1px 1px 1px #000, 3px 3px 5px rgba(0,0,233,0.4)\"\r\n    }\r\n    if(!data.confirmed){\r\n        return(\r\n            <div>\r\n                <Backdrop open={!data.confirmed}> \r\n                    <CircularProgress color=\"inherit\" style={{zIndex:\"1\",position:\"relative\"}} />\r\n                </Backdrop>\r\n            </div>\r\n        );\r\n    }\r\n    return ( \r\n        <div className=\"main-container\">\r\n            <Typography variant=\"h2\" style={styles} gutterBottom>\r\n                COVID-19\r\n            </Typography>\r\n            <Cards data={data}/>\r\n            <Countries handleCountryChange={handleOnChange}/>\r\n            <Graph data={data} country={country}/>\r\n            <FavoriteBorderIcon color=\"primary\"/>\r\n            <Typography variant=\"h5\" style={{fontFamily: \"Cormorant Garamond, serif\"}}>Stay Home ! Stay Safe!</Typography>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default CovidTracker;","import React from 'react';\nimport './App.css';\nimport CovidTracker from './CovidTracker';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CovidTracker/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Graph_container__58W3Z\",\"cardGraph\":\"Graph_cardGraph__2YAtc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"native_select\":\"Countries_native_select__17eIp\"};"],"sourceRoot":""}